OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
emapplot(gse, showCategory = 10)
emapplot(gsea, showCategory = 10)
cnetplot(gsea, categorySize="pvalue", foldChange=gene_list, showCategory = 3)
cnetplot(gsea, categorySize="pvalue", foldChange=genelist, showCategory = 3)
gseaplot(gsea, by = "all", title = gse$Description[1], geneSetID = 1)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
gseaplot(gsea, by = "all", title = gsea$Description[11], geneSetID = 11)
gseaplot(gsea, by = "all", title = gsea$Description[2], geneSetID = 2)
gseaplot(gsea, by = "all", title = gsea$Description[3], geneSetID = 3)
gseaplot(gsea, by = "all", title = gsea$Description[4], geneSetID = 4)
gseaplot(gsea, by = "all", title = gsea$Description[5], geneSetID = 5)
gseaplot(gsea, by = "all", title = gsea$Description[6], geneSetID = 6)
gseaplot(gsea, by = "all", title = gsea$Description[7], geneSetID = 7)
gseaplot(gsea, by = "all", title = gsea$Description[8], geneSetID = 8)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
# Should already be sorted on WD score
genelist = interactors$SaintScore
names(genelist) = interactors$Prey.Gene.Name
gsea = gseGO(geneList=genelist,
ont ="ALL",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
genelist = interactors$SaintScore
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="ALL",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
genelist = interactors$FoldChange
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="ALL",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
genelist = interactors$FoldChange
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="CC",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
genelist = log2(interactors$FoldChange)
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="CC",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
bait = "GSK3B"
#################
interactors = annotated_merged %>% filter(Bait.Gene.Name == bait) %>%
filter(!(is.na(Prey.Gene.Name) | Prey.Gene.Name == "")) # Remove preys that don't have a gene name
# Should already be sorted on WD score
genelist = log2(interactors$FoldChange)
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="CC",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
bait = "CDK2"
#################
interactors = annotated_merged %>% filter(Bait.Gene.Name == bait) %>%
filter(!(is.na(Prey.Gene.Name) | Prey.Gene.Name == "")) # Remove preys that don't have a gene name
# Should already be sorted on WD score
genelist = log2(interactors$FoldChange)
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="CC",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
bait = "KEAP1"
#################
interactors = annotated_merged %>% filter(Bait.Gene.Name == bait) %>%
filter(!(is.na(Prey.Gene.Name) | Prey.Gene.Name == "")) # Remove preys that don't have a gene name
# Should already be sorted on WD score
genelist = log2(interactors$FoldChange)
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="CC",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
bait = "KEAP1"
#################
interactors = annotated_merged %>% filter(Bait.Gene.Name == bait) %>%
filter(!(is.na(Prey.Gene.Name) | Prey.Gene.Name == "")) # Remove preys that don't have a gene name
# Should already be sorted on WD score
genelist = log2(interactors$FoldChange)
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="BP",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
bait = "GSK3B"
#################
interactors = annotated_merged %>% filter(Bait.Gene.Name == bait) %>%
filter(!(is.na(Prey.Gene.Name) | Prey.Gene.Name == "")) # Remove preys that don't have a gene name
# Should already be sorted on WD score
genelist = log2(interactors$FoldChange)
names(genelist) = interactors$Prey.Gene.Name
genelist = sort(genelist,decreasing = TRUE)
gsea = gseGO(geneList=genelist,
ont ="BP",
keyType = "SYMBOL",
nPermSimple = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
dotplot(gsea, showCategory=10, split=".sign") + facet_grid(.~.sign)
gseaplot(gsea, by = "all", title = gsea$Description[1], geneSetID = 1)
num_baits = length(unique(annotated_merged$Bait.Gene.Name))
annotated_merged$Bait.Gene.Name
unique(annotated_merged$Bait.Gene.Name)
baits = unique(annotated_merged$Bait.Gene.Name)[! unique(annotated_merged$Bait.Gene.Name) %in% c("")]
sim_matrix = matrix(nrow = num_baits,ncol = num_baits)
rownames(sim_matrix) = baits
colnames(sim_matrix) = baits
View(sim_matrix)
baits = unique(annotated_merged$Bait.Gene.Name)[! unique(annotated_merged$Bait.Gene.Name) %in% c("")]
num_baits = length(baits)
sim_matrix = matrix(nrow = num_baits,ncol = num_baits)
rownames(sim_matrix) = baits
colnames(sim_matrix) = baits
sim_matrix[1,2] = 3
View(sim_matrix)
baits[1]
baits[2]
#################
filtered_data = read.csv(annotated_merged_filtered_path)
annotated_merged_filtered_path = "C:/Users/plutzer/Work/IDG_pipeline/outputs/testset_blank_2/Annotated_Filtered_Merged_Output.csv"
filtered_data = read.csv(annotated_merged_filtered_path)
get_jaccard = function(filtered_data,bait_1,bait_2) {
bait_1_set = unique(filter(data,Bait.Gene.Name == bait_1)$Prey.Gene.Name)
bait_2_set = unique(filter(data,Bait.Gene.Name == bait_2)$Prey.Gene.Name)
# Compute the Jaccard Index
intersection = length(intersect(bait_1_set,bait_2_set))
union = length(bait_1_set) + length(bait_2_set) - intersection
return (intersection/union)
}
baits = unique(annotated_merged$Bait.Gene.Name)[! unique(annotated_merged$Bait.Gene.Name) %in% c("")]
num_baits = length(baits)
sim_matrix = matrix(nrow = num_baits,ncol = num_baits)
rownames(sim_matrix) = baits
colnames(sim_matrix) = baits
for (i in 1:num_baits) {
for (j in 1:num_baits) {
sim_matrix = get_jaccard(filtered_data,baits[i],baits[j])
}
}
filtered_data = read.csv(annotated_merged_filtered_path)
get_jaccard = function(filtered_data,bait_1,bait_2) {
bait_1_set = unique(filter(filtered_data,Bait.Gene.Name == bait_1)$Prey.Gene.Name)
bait_2_set = unique(filter(filtered_data,Bait.Gene.Name == bait_2)$Prey.Gene.Name)
# Compute the Jaccard Index
intersection = length(intersect(bait_1_set,bait_2_set))
union = length(bait_1_set) + length(bait_2_set) - intersection
return (intersection/union)
}
baits = unique(annotated_merged$Bait.Gene.Name)[! unique(annotated_merged$Bait.Gene.Name) %in% c("")]
num_baits = length(baits)
sim_matrix = matrix(nrow = num_baits,ncol = num_baits)
rownames(sim_matrix) = baits
colnames(sim_matrix) = baits
for (i in 1:num_baits) {
for (j in 1:num_baits) {
sim_matrix = get_jaccard(filtered_data,baits[i],baits[j])
}
}
# Make a heatmap
m = sim_matrix
image(1:ncol(m), 1:nrow(m), t(m), col = terrain.colors(60), axes = FALSE)
require(fields)
library(fields)
install.packages("fields")
library(fields)
m = matrix(rnorm(100), nrow=10)
image.plot(m)
for (x in 1:10)
for (y in 1:10)
text((x-1)/9, (y-1)/9, sprintf("%0.2f", m[x,y]))
# Make a heatmap
m = sim_matrix
m = sim_matrix
require(fields)
# Make a 10x10 matrix
image.plot(m)
ggplot(sim_matrix, aes(X, Y, fill= Z)) +
geom_tile()
data = data.frame(sim_matrix)
ggplot(sim_matrix, aes(X, Y, fill= Z)) +
geom_tile()
sim_frame = data.frame(sim_matrix)
ggplot(sim_frame, aes(X, Y, fill= Z)) +
geom_tile()
library(reshape2)
library(reshape2)
sim_frame = melt(sim_matrix)
head(sim_frame)
filtered_data = read.csv(annotated_merged_filtered_path)
get_jaccard = function(filtered_data,bait_1,bait_2) {
bait_1_set = unique(filter(filtered_data,Bait.Gene.Name == bait_1)$Prey.Gene.Name)
bait_2_set = unique(filter(filtered_data,Bait.Gene.Name == bait_2)$Prey.Gene.Name)
# Compute the Jaccard Index
intersection = length(intersect(bait_1_set,bait_2_set))
union = length(bait_1_set) + length(bait_2_set) - intersection
return (intersection/union)
}
baits = unique(annotated_merged$Bait.Gene.Name)[! unique(annotated_merged$Bait.Gene.Name) %in% c("")]
num_baits = length(baits)
sim_matrix = matrix(nrow = num_baits,ncol = num_baits)
rownames(sim_matrix) = baits
colnames(sim_matrix) = baits
for (i in 1:num_baits) {
for (j in 1:num_baits) {
sim_matrix = get_jaccard(filtered_data,baits[i],baits[j])
}
}
View(sim_frame)
filtered_data = read.csv(annotated_merged_filtered_path)
get_jaccard = function(filtered_data,bait_1,bait_2) {
bait_1_set = unique(filter(filtered_data,Bait.Gene.Name == bait_1)$Prey.Gene.Name)
bait_2_set = unique(filter(filtered_data,Bait.Gene.Name == bait_2)$Prey.Gene.Name)
# Compute the Jaccard Index
intersection = length(intersect(bait_1_set,bait_2_set))
union = length(bait_1_set) + length(bait_2_set) - intersection
return (intersection/union)
}
baits = unique(annotated_merged$Bait.Gene.Name)[! unique(annotated_merged$Bait.Gene.Name) %in% c("")]
num_baits = length(baits)
sim_matrix = matrix(nrow = num_baits,ncol = num_baits)
rownames(sim_matrix) = baits
colnames(sim_matrix) = baits
for (i in 1:num_baits) {
for (j in 1:num_baits) {
sim_matrix[i,j] = get_jaccard(filtered_data,baits[i],baits[j])
}
}
sim_frame = melt(sim_matrix)
View(sim_frame)
ggplot(sim_frame, aes(x = Var1,y = Var2, fill= value)) +
geom_tile()
heatmap(sim_frame)
heatmap(sim_matrix)
View(sim_matrix)
heatmap(sim_matrix,symm=T)
View(annotated)
rm(list=ls())
repo_path = 'C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer'
setwd(repo_path)
library(reticulate)
library(cRomppass)
library(tidyverse)
library(DarkKinaseTools)
library(org.Hs.eg.db)
library(dplyr)
#source("compute_wds.R")
source("filter_interaction.R")
source("comppass-FDR.R")
source("cytoscape_outputs.R")
source("merge_annotate_filter.R")
# Later change parameters section to use input arguments or shiny buttons
################# Parameters ###################################################
ED_path = 'C:/Users/plutzer/Work/IDG_pipeline/ED_DB.csv'
PG_path = 'C:/Users/plutzer/Work/IDG_pipeline/proteinGroups.txt'
output_dir = 'C:/Users/plutzer/Work/IDG_pipeline/outputs/testset_blank_2'
resampling_iterations=100 #for perm_fdr calculation
quantification_method = "spc"
# Filtering parameters
BFDR_cutoff = 0.05
AvgP_cutoff = 0.7
Comppass_percent = 0.05 # Might not need?
################################################################################
############### Setting variables ##############################################
setwd(output_dir)
uniprot_map_path = paste0(repo_path,'/uniprot_mapping.tsv.zip')
biogrid_mv_path = paste0(repo_path,'/BIOGRID-MV-Physical-4.4.211.tab3.txt')
biogrid_all_path = paste0(repo_path,'/BIOGRID-ALL-4.4.211.tab3.txt')
# Set the SAINT path based on the quantification method
if (quantification_method == "spc") {
SAINT_path = paste0(repo_path,"/build/SAINTexpress-spc.exe")
} else if (quantification_method == "int") {
SAINT_path = paste0(repo_path,"/build/SAINTexpress-int.exe")
} else {print("Invalid argument: quantification_method")}
# This is for some reason necessary
select <- get(x="select", pos = "package:dplyr")
################################################################################
########### Generate SAINT inputs ##############################################
# For some unknown reason, this line is necessary even though it does nothing.
py_run_string("print(\"Python is Running.\")")
# Re-using the exisiting code for this because this parser works well
system(paste0("python ",repo_path,"/score_APMS_noSAINT.py", # Change filename
" --experimentalDesign ",ED_path,
" --proteinGroups " ,PG_path,
" --outputPath ",output_dir,
" --quantification-saint ",quantification_method,
" --quantification-comppass ",quantification_method))
# Set variables for new files generated
interaction_path = paste(output_dir,'/interaction.txt',sep = '')
prey_path = paste(output_dir,'/prey.txt',sep = '')
bait_path = paste(output_dir,'/bait.txt',sep = '')
# Filter the interaction file to remove preys with 0 intensity or spectral counts in all reps
filtered_interaction_path = filter_interaction(interaction_path)
# Run SAINT with defaults
system(paste(SAINT_path,filtered_interaction_path,prey_path,bait_path))
################################################################################
############# Run comppass and Perm FDR ########################################
to_comp_filename = paste(output_dir,"/to_CompPASS.csv",sep='')
comp_out = run_comppass(to_comp_filename,n_iter = resampling_iterations)
################################################################################
# Merge the compass and SAINT outputs
merged = merge_scores(paste(output_dir,'/list.txt',sep=''),comp_out,output_dir)
# Annotated the merged data with Uniprot and GO info
annotated = annotate_uniprot_go(merged,uniprot_map_path)
last_trace()
rm(list=ls())
source("filter_interaction.R")
repo_path = 'C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer'
setwd(repo_path)
library(reticulate)
library(cRomppass)
library(tidyverse)
library(DarkKinaseTools)
library(org.Hs.eg.db)
library(dplyr)
#source("compute_wds.R")
source("filter_interaction.R")
source("comppass-FDR.R")
source("cytoscape_outputs.R")
source("merge_annotate_filter.R")
# Later change parameters section to use input arguments or shiny buttons
################# Parameters ###################################################
ED_path = 'C:/Users/plutzer/Work/IDG_pipeline/ED_DB.csv'
PG_path = 'C:/Users/plutzer/Work/IDG_pipeline/proteinGroups.txt'
output_dir = 'C:/Users/plutzer/Work/IDG_pipeline/outputs/testset_blank_2'
# Annotated the merged data with Uniprot and GO info
annotated = annotate_uniprot_go(merged,uniprot_map_path)
setwd(output_dir)
uniprot_map_path = paste0(repo_path,'/uniprot_mapping.tsv.zip')
biogrid_mv_path = paste0(repo_path,'/BIOGRID-MV-Physical-4.4.211.tab3.txt')
biogrid_all_path = paste0(repo_path,'/BIOGRID-ALL-4.4.211.tab3.txt')
rm(list = ls())
repo_path = 'C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer'
setwd(repo_path)
library(reticulate)
library(cRomppass)
library(tidyverse)
library(DarkKinaseTools)
library(org.Hs.eg.db)
library(dplyr)
#source("compute_wds.R")
source("filter_interaction.R")
source("comppass-FDR.R")
source("cytoscape_outputs.R")
source("merge_annotate_filter.R")
# Later change parameters section to use input arguments or shiny buttons
################# Parameters ###################################################
ED_path = 'C:/Users/plutzer/Work/IDG_pipeline/ED_DB.csv'
PG_path = 'C:/Users/plutzer/Work/IDG_pipeline/proteinGroups.txt'
output_dir = 'C:/Users/plutzer/Work/IDG_pipeline/outputs/testset_blank_2'
resampling_iterations=100 #for perm_fdr calculation
quantification_method = "spc"
# Filtering parameters
BFDR_cutoff = 0.05
AvgP_cutoff = 0.7
Comppass_percent = 0.05 # Might not need?
################################################################################
############### Setting variables ##############################################
setwd(output_dir)
uniprot_map_path = paste0(repo_path,'/uniprot_mapping.tsv.zip')
biogrid_mv_path = paste0(repo_path,'/BIOGRID-MV-Physical-4.4.211.tab3.txt')
biogrid_all_path = paste0(repo_path,'/BIOGRID-ALL-4.4.211.tab3.txt')
# Set the SAINT path based on the quantification method
if (quantification_method == "spc") {
SAINT_path = paste0(repo_path,"/build/SAINTexpress-spc.exe")
} else if (quantification_method == "int") {
SAINT_path = paste0(repo_path,"/build/SAINTexpress-int.exe")
} else {print("Invalid argument: quantification_method")}
# This is for some reason necessary
select <- get(x="select", pos = "package:dplyr")
################################################################################
########### Generate SAINT inputs ##############################################
# For some unknown reason, this line is necessary even though it does nothing.
py_run_string("print(\"Python is Running.\")")
# Re-using the exisiting code for this because this parser works well
system(paste0("python ",repo_path,"/score_APMS_noSAINT.py", # Change filename
" --experimentalDesign ",ED_path,
" --proteinGroups " ,PG_path,
" --outputPath ",output_dir,
" --quantification-saint ",quantification_method,
" --quantification-comppass ",quantification_method))
# Set variables for new files generated
interaction_path = paste(output_dir,'/interaction.txt',sep = '')
prey_path = paste(output_dir,'/prey.txt',sep = '')
bait_path = paste(output_dir,'/bait.txt',sep = '')
# Filter the interaction file to remove preys with 0 intensity or spectral counts in all reps
filtered_interaction_path = filter_interaction(interaction_path)
# Run SAINT with defaults
system(paste(SAINT_path,filtered_interaction_path,prey_path,bait_path))
################################################################################
############# Run comppass and Perm FDR ########################################
to_comp_filename = paste(output_dir,"/to_CompPASS.csv",sep='')
comp_out = run_comppass(to_comp_filename,n_iter = resampling_iterations)
################################################################################
# Merge the compass and SAINT outputs
merged = merge_scores(paste(output_dir,'/list.txt',sep=''),comp_out,output_dir)
# Annotated the merged data with Uniprot and GO info
annotated = annotate_uniprot_go(merged,uniprot_map_path)
repo_path = 'C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer'
setwd(repo_path)
library(reticulate)
library(cRomppass)
library(tidyverse)
library(DarkKinaseTools)
library(org.Hs.eg.db)
library(dplyr)
#source("compute_wds.R")
source("filter_interaction.R")
source("comppass-FDR.R")
source("cytoscape_outputs.R")
source("merge_annotate_filter.R")
repo_path = 'C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer'
setwd(repo_path)
library(reticulate)
library(cRomppass)
library(tidyverse)
library(DarkKinaseTools)
library(org.Hs.eg.db)
library(dplyr)
#source("compute_wds.R")
source("filter_interaction.R")
source("comppass-FDR.R")
source("cytoscape_outputs.R")
source("merge_annotate_filter.R")
