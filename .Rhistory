data <- data[, seq(1, ncol(data), 3)] +
data[, seq(2, ncol(data), 3)] +
data[, seq(3, ncol(data), 3)]
colnames(data) <- sub("___1", "_p", colnames(data))
row.names(data) <- acc$Phosphosite
data <- TMTPurityCorrection::correctTMTproImpurities(data, impurities = tmt.impurities)
data <- as.data.frame(data)
data <- data %>% rename_with(~ gsub("Reporter.intensity.corrected", "Corrected.Reporter.intensity", colnames(data)))
data <- data %>% select(contains("Corrected"))
colnames(data) <- sub("Corrected.", "Phospho_", colnames(data))
data[data==0] <- NA
data <- na.omit(data)
for(i in 1:as.numeric(nrow(ann)))
{
colnames(data) <- sub(ann[((as.numeric(nrow(ann))+1)-i),1], ann[((as.numeric(nrow(ann))+1)-i),3], colnames(data))
}
}
else
{
# Subset out just the intensity channels, but keeping the accession information
# Accession is major protein UniProt ID + Position in that protein
data <- select (data, starts_with("Reporter.intensity.corrected")
& contains(exp))
data <- data[, seq(1, ncol(data), 3)] +
data[, seq(2, ncol(data), 3)] +
data[, seq(3, ncol(data), 3)]
colnames(data) <- sub("___1", "_p", colnames(data))
row.names(data) <- acc$Phosphosite
colnames(data) <- sub(".corrected","", colnames(data))
data[data==0] <- NA
data <- na.omit(data)
ann$channelNames <- str_c(ann$Channel, ".", ann$Experiment)
for(i in 1:as.numeric(nrow(ann)))
{
colnames(data) <- sub(ann[i,4], ann[i,3], colnames(data))
}
}
temp <- data.frame()
a <- grep(cond[1,1], colnames(data))
temp <- cbind(data[c(a)])
for (i in 2:as.numeric(nrow(cond)))
{
a <- grep(cond[i,1], colnames(data))
temp <- add_column(temp, data[c(a)])
}
data <- temp
return(data)
}
MixingCorrection <- function(data)
{
## Ratio correction
# Sum the total reporter intensity of each channel, removing any missing values
# Calculate ratio correction compared to the average total reporter ion intensity
colSums <- colSums(data, na.rm = TRUE)
ratios <- colSums / mean(colSums)
return(ratios)
}
RatioCorrection <- function(data, ratios)
{
# Sweep function applies an operation to a data matrix by either row or column
# sweep (x = data, MARGIN, STATS, FUN)
# MARGIN = 1 operates by row and MARGIN = 2 operates by column
# STATS - specifies the the value that should be used for the operation
# FUN - function to be carried out, should be in ""
data <- sweep(data, 2, ratios, `/`)
return(data)
}
ApplyTMMFactors <- function(y)
{
# compute grand total (library size) scalings
lib_facs <- mean(y$samples$lib.size) / y$samples$lib.size
# the TMM factors are library adjustment factors (so divide by them)
norm_facs <- lib_facs / y$samples$norm.factors
cat("Overall Factors (lib.size+TMM):\n", sprintf("%-5s -> %f\n",
colnames(y$counts), norm_facs))
# compute the normalized data as a new data frame
tmt_tmm <- as.data.frame(sweep(y$counts, 2, norm_facs, FUN = "*"))
colnames(tmt_tmm) <- str_c(colnames(y$counts), "_N")
tmt_tmm
}
PlotVolcano <- function (data, x, ylimit, xlimit, w, h)
{
volcanoplots <- list()
for(i in 1:length(data))
{
title <- str_c(names(data[i]), x, sep = ", ")
filename <- str_c(title, ".png", sep = "")
volcanoplots[[i]] <- ggplot(data[[i]], aes(x = logFC, y = -log10(FDR))) +
geom_point(aes(color = candidate), size = 1) +
xlab("Fold-Change (Log2)") +
ylab("-Log10 Adj PValue") +
ggtitle(title) +
geom_hline(yintercept= -log10(0.01), linetype="dashed", color = "black") +
geom_vline(xintercept = log2(1.5), linetype = 'dashed', color = 'black') +
geom_vline(xintercept = -log2(1.5), linetype = 'dashed', color = 'black') +
xlim(-xlimit, xlimit) +
ylim (-0.1, ylimit) +
theme_bw() +
scale_color_manual(values = c('red', 'grey'), levels(data()$candidate))
ggsave(filename, width = w, height = h, units = "in", dpi = 1200)
}
return(volcanoplots)
}
EdgeRCalculation <- function(data, raw, comp)
{
listofdfs <- list()
for(i in 1:as.numeric(nrow(comp)))
{
name <- toString(comp[i,3])
x <- grep(comp[i,2], colnames(raw))
y<-  grep(comp[i,1], colnames(raw))
et <- exactTest(data, pair = c(comp[i,2], comp[i,1]))
tt <- topTags(et, n= Inf, sort.by = "none")$table
tt$candidate <- "no"
tt[which(tt$FDR <= 0.01 & abs(tt$logFC) >= 0.58), dim(tt)[2]] <- "high"
# make data frame
temp <- cbind(raw[c(x, y)], data.frame(logFC = tt$logFC,
PValue = tt$PValue, FDR = tt$FDR,
candidate = tt$candidate,
Accession = tt[,1]))
listofdfs[[i]] <- temp
names(listofdfs)[i] <- name
}
return(listofdfs)
}
ExtractData <- function(data)
{
temp <- as.data.frame(data[1])
temp <- temp %>% select(contains("logFC"), contains("PValue"), contains("FDR"), contains("candidate"))
return(temp)
}
plotPCA <- function(data, plex, colors, points, positions, type)
{
default <- par("mar")
par(mar=c(4,4,2,2))
temp <- t(data)
p <- prcomp(temp, scale. = TRUE)
s <- summary(p)
title = str_c("PCA_", plex, "_", type, ".png")
png(title, width = 5, height=5, units = 'in', res = 1200)
plot(p$x[,1], p$x[,2],
pch=points, col="black", bg=colors, cex=1, las=1, asp=1, cex.axis = .5, cex.lab = 0.5, ann = FALSE)
text(p$x[,1], p$x[,2], labels=row.names(p$x), pos=positions, font=1, cex = 0.5)
xlab = str_c("PCA 1 (", round(s$importance[2]*100, 1), "%)")
ylab = str_c("PCA 2 (", round(s$importance[5]*100, 1), "%)")
t = str_c("PCA, ", plex, ", ", type)
mtext(side = 1, text = xlab, line = 2)
mtext(side = 2, text = ylab, line = 1.7)
mtext(side = 3, text = t, line = 0.3)
dev.off()
par(default)
}
PlotBoxPlot <- function(data, type, color, norm, filename)
{
default <- par("mar")
par(mar=c(10,4,2,2))
# Boxplot for intensity values prior to normalization
title <- str_c(filename, ".png")
png(title, width = 7, height=7, units = 'in', res = 1200)
boxplot(log10(data), col = color, notch = TRUE,
las = 2, cex.axis = 0.6)
mtext(side = 2, text = "Log10 Intensity", line = 1.7)
if (norm == FALSE)
{
t <- str_c(type, " Intensity - No Normalization")
mtext(side = 3, text = t, line = 0.3, font=2)
}
else
{
t <- str_c(type, " Intensity - Normalized")
mtext(side = 3, text = t, line = 0.3, font=2)
}
dev.off()
par(default)
}
PlotInteractiveVolcano <- function (data, title, LogFC, pvalues, colorcode, colors, phospho)
{
p <- enquo(pvalues)
pv <- select(data, !!p)
l <- enquo(LogFC)
lfc <- select(data, !!l)
ylimit <- -log10(min(pv)) + 5
ylimit <- round(ylimit, digits = 2)
print(ylimit)
if (max(lfc) > -min(lfc))
{
max = max(lfc) + 1
xlimit = round(max, digits = 1)
}
else
{
max = -min(lfc) + 1
xlimit = round(max, digits = 1)
}
print(xlimit)
filename <- str_c(title, ".html", sep = "")
#colors for volcano plot
colors <- c("firebrick3", "grey")
if (phospho == TRUE)
{
vp <- ggplot(data, aes(x = {{LogFC}}, y = -log10({{pvalues}}),
pvalue = {{pvalues}}, Gene = Gene.names, Protein = Proteins,
Site = Positions.within.proteins, Amino.Acid = Amino.acid,
LocProb = Localization.prob)) +
geom_point(aes(color = {{colorcode}}), size = 1) +
xlab("Fold-Change (Log2)") +
ylab("-Log10 PValue") +
ggtitle(title) +
geom_hline(yintercept= -log10(0.05), linetype="dashed", color = "black") +
geom_vline(xintercept = 0.7, linetype = 'dashed', color = 'black') +
geom_vline(xintercept = -0.7, linetype = 'dashed', color = 'black') +
xlim(-xlimit, xlimit) +
ylim (-0.1, ylimit) +
theme_bw() +
scale_color_manual(values = colors)
ivp <- ggplotly(vp)
}
else
{
vp <- ggplot(data, aes(x = {{LogFC}}, y = -log10({{pvalues}}),
pvalue = {{pvalues}}, Gene = Gene.names, Protein = Protein.names)) +
geom_point(aes(color = {{colorcode}}), size = 1) +
xlab("Fold-Change (Log2)") +
ylab("-Log10 PValue") +
ggtitle(title) +
geom_hline(yintercept= -log10(0.05), linetype="dashed", color = "black") +
geom_vline(xintercept = 0.7, linetype = 'dashed', color = 'black') +
geom_vline(xintercept = -0.7, linetype = 'dashed', color = 'black') +
xlim(-xlimit, xlimit) +
ylim (-0.1, ylimit) +
theme_bw() +
scale_color_manual(values = colors)
ivp <- ggplotly(vp)
}
htmlwidgets::saveWidget(ivp, filename)
}
ExtractData <- function(data, DGE, name)
{
temp <- as.data.frame(data[1])
acc <- temp %>% select(contains("Accession"))
row.names(temp) <- acc[,1]
temp <- temp %>% select(contains("logFC"), contains("PValue"), contains("FDR"), contains("candidate"))
if(length(data)>1)
{
for (i in 2:length(data))
{
a <- as.data.frame(data[i])
a <- a %>% select(contains("logFC"), contains("PValue"), contains("FDR"), contains("candidate"))
temp <- add_column(temp, a)
}
}
temp$ID <- row.names(temp)
quant <- as.data.frame(DGE$counts)
quant$ID <- row.names(quant)
combined <- inner_join(quant, temp, by = "ID")
combined <- inner_join(name, combined, by = "ID")
row.names(combined) <- combined$ID
combined <- select(combined, -ID)
return(combined)
}
protein.name <- ProteinNameInfo(rawMQ.protein)
protein.DGE <- DGEList(counts = proteins, group = group, genes = row.names(proteins))
# Extract intensity information, remove zeros, rename with experimental design
proteins <- FilterProteinData(rawMQ.protein, annotations, conditions, TRUE, TRUE)
library(tidyverse)
library(dplyr)
pg_filename = "C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmixes/Fixed/proteinGroups.txt"
exp_name_1 = "testmix_1"
exp_name_2 = "testmix_2"
pg = read.csv(pg_filename,sep='\t')
# Normalize the reporter ion columns
data = pg
intensity_colnames = colnames(select(data,starts_with("Reporter.intensity.corrected")))
#exp_1_cols =
data = data %>%
# Filter out contaminants
filter(Reverse != '+') %>%
# Filter out contaminants
filter(Potential.contaminant != '+') %>%
# Keep necessary columns
select(c("Protein.IDs","Protein.names","Gene.names","Q.value"),starts_with("Reporter.intensity.corrected"))
rm(list=ls())
library(tidyverse)
library(dplyr)
pg_filename = "C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmixes/Fixed/proteinGroups.txt"
exp_name_1 = "testmix_1"
exp_name_2 = "testmix_2"
pg = read.csv(pg_filename,sep='\t')
# Normalize the reporter ion columns
data = pg
intensity_colnames = colnames(select(data,starts_with("Reporter.intensity.corrected")))
#exp_1_cols =
data = data %>%
# Filter out contaminants
filter(Reverse != '+') %>%
# Filter out contaminants
filter(Potential.contaminant != '+') %>%
# Keep necessary columns
select(c("Protein.IDs","Protein.names","Gene.names","Q.value"),starts_with("Reporter.intensity.corrected"))
colsums1 = colSums(select(data,ends_with(exp_name_1)),na.rm=TRUE)
ratios1 = colsums1/mean(colsums1)
ratios1
# Normalize the data
colsums1 = colSums(select(data,ends_with(exp_name_1)),na.rm=TRUE)
ratios1 = colsums1/mean(colsums1)
colsums2 = colSums(select(data,ends_with(exp_name_2)),na.rm=TRUE)
ratios2 = colsums2/mean(colsums2)
c(ratios1,ratios2)
data[intensity_colnames]
View(data)
data[intensity_colnames] = sweep(data,2,c(ratios1,ratios2),`/`)
data[intensity_colnames] = sweep(data[intensity_colnames],2,c(ratios1,ratios2),`/`)
cbind(c("spice","meat"),c("sauce","toast"))
base::cbind(c("spice","meat"),c("sauce","toast"))
test = base::cbind(c("spice","meat"),c("sauce","toast"))
controls = c(1,3,5,7,9)
experiment = c(2,4,6,8,10)
conditions = cbind(controls,experiment)
View(conditions)
apply(controls,1,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1")})
sapply(controls,1,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1")})
sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1")})
sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})
fc1 = apply(data,1,FUN = function(x){
ctrl_mean = mean(select(x,all_of(sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains()))
})
fc1 = apply(data,1,FUN = function(x){
ctrl_mean = mean(select(x,all_of(sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains()))
})
x
log2_fc1 = apply(data,1,FUN = function(x){
log(mean(select(x,all_of(sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains()))/
mean(select(x,all_of(sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains())),base = 2)
})
select(x,all_of(sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')}))
log2_fc1 = apply(data,1,FUN = function(x){
log(mean(select(x,all_of(sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')}))))/
mean(select(x,all_of(sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains())),base = 2)
})
log2_fc1 = apply(data,1,FUN = function(x){
log(mean(select(x,all_of(sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')}))))/
mean(select(x,all_of(sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains())),base = 2)
})
log2_fc1 = apply(data,1,FUN = function(x){
print(x)
#log(mean(select(x,all_of(sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')}))))/
#mean(select(x,all_of(sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})),contains())),base = 2)
})
select(data[[1]],all_of(sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})))
View(data)
log2_fc1 = apply(data,1,FUN = function(x){
log(mean(x[exp_cols1])/mean(x[control_cols1]),base = 2)
})
control_cols1 = sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})
exp_cols1 = sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})
function (X, FUN, ...)
{
FUN <- match.fun(FUN)
if (!is.vector(X) || is.object(X))
X <- as.list(X)
.Internal(lapply(X, FUN))
}
experiments = c(2,4,6,8,10)
control_cols1 = sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})
exp_cols1 = sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_1",sep='')})
control_cols2 = sapply(controls,function(x){paste("Reporter.intensity,corrected.",x,".testmix_2",sep='')})
exp_cols2 = sapply(experiments,function(x){paste("Reporter.intensity,corrected.",x,".testmix_2",sep='')})
log2_fc1 = apply(data,1,FUN = function(x){
log(mean(x[exp_cols1])/mean(x[control_cols1]),base = 2)
})
log2_fc1
warnings()
data[[1]][exp_cols1]
View(data)
data[[1]]
data[1]
data[exp_cols1]
exp_cols1
unlist(exp_cols1)
select(data,exp_cols1)
View(data)
data.path <-"C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmix/Variable/modificationSpecificPeptides.txt"
data.path <-"C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmix/Variable"
data <- read_maxquant_mod_specific_peptides(str_c(data.path, "modificationSpecificPeptides.txt"),
"TMT10-K",
"TMT10-Nterm",
c(),
c(),
"id")
library(tidyverse)
library(CPTACQC)
data <- read_maxquant_mod_specific_peptides(str_c(data.path, "modificationSpecificPeptides.txt"),
"TMT10-K",
"TMT10-Nterm",
c(),
c(),
"id")
data.path <-"C:\\Users\\plutzer\\Box\\CellBio-MajorLab\\Users\\Isaac\\Experiments\\002_WNT_phospho_test\\Testmix\\Variable"
data <- read_maxquant_mod_specific_peptides(str_c(data.path, "modificationSpecificPeptides.txt"),
"TMT10-K",
"TMT10-Nterm",
c(),
c(),
"id")
data.path <-"C:\\Users\\plutzer\\Box\\CellBio-MajorLab\\Users\\Isaac\\Experiments\\002_WNT_phospho_test\\Testmixes\\Variable"
data <- read_maxquant_mod_specific_peptides(str_c(data.path, "modificationSpecificPeptides.txt"),
"TMT10-K",
"TMT10-Nterm",
c(),
c(),
"id")
data.path <-"C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmixes/Variable"
data <- read_maxquant_mod_specific_peptides(str_c(data.path, "modificationSpecificPeptides.txt"),
"TMT10-K",
"TMT10-Nterm",
c(),
c(),
"id")
modificationSpecificPeptides <- read.delim("C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmixes/Variable/modificationSpecificPeptides.txt", header=FALSE)
View(modificationSpecificPeptides)
data = modificationSpecificPeptides
LE <- calc_stats(data)
View(LE)
data.path <-"C:/Users/plutzer/Box/CellBio-MajorLab/Users/Isaac/Experiments/002_WNT_phospho_test/Testmixes/Variable/"
data <- read_maxquant_mod_specific_peptides(str_c(data.path, "modificationSpecificPeptides.txt"),
"TMT10-K",
"TMT10-Nterm",
c(),
c(),
"id")
LE <- calc_stats(data)
View(LE)
library(org.Hs.eg.db)
library(reticulate)
library(cRomppass)
library(ggplot2)
library(ggplot2)
system("type R")
R.home()
repo_path = getwd()
############### Setting variables ##############################################
setwd(output_dir)
repo_path = 'C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer'
setwd(repo_path)
library(reticulate)
library(cRomppass)
library(tidyverse)
library(DarkKinaseTools)
library(org.Hs.eg.db)
library(dplyr)
#source("compute_wds.R")
source("filter_interaction.R")
source("comppass-FDR.R")
source("cytoscape_outputs.R")
source("merge_annotate_filter.R")
################## ARGUMENTS ####################################################
args = commandArgs(trailingOnly = TRUE)
# Check arguments
################# Parameters ###################################################
ED_path = 'C:/Users/plutzer/Work/IDG_pipeline/ED_DB.csv'
PG_path = 'C:/Users/plutzer/Work/IDG_pipeline/proteinGroups.txt'
output_dir = 'C:/Users/plutzer/Work/IDG_pipeline/outputs/testset_int' ## No slash at end!!!
resampling_iterations=100 #for perm_fdr calculation
quantification_method = "intensity"
# Filtering parameters
BFDR_cutoff = 0.05
AvgP_cutoff = 0.7
Comppass_percent = 0.05 # Might not need?
################################################################################
############### Setting variables ##############################################
setwd(output_dir)
uniprot_map_path = paste0(repo_path,'/uniprot_mapping.tsv.zip')
biogrid_mv_path = paste0(repo_path,'/BIOGRID-MV-Physical-4.4.211.tab3.txt')
biogrid_all_path = paste0(repo_path,'/BIOGRID-ALL-4.4.211.tab3.txt')
# Set the SAINT path based on the quantification method
if (quantification_method == "spc") {
SAINT_path = paste0(repo_path,"/build/SAINTexpress-spc.exe")
} else if (quantification_method == "intensity") {
SAINT_path = paste0(repo_path,"/build/SAINTexpress-int.exe")
} else {print("Invalid argument: quantification_method")}
# This is for some reason necessary
select <- get(x="select", pos = "package:dplyr")
################################################################################
########### Generate SAINT inputs ##############################################
# For some unknown reason, this line is necessary even though it does nothing.
py_run_string("print(\"Python is Running.\")")
# Re-using the exisiting code for this because this parser works well
system(paste0("python ",repo_path,"/score_APMS_noSAINT.py", # Change filename
" --experimentalDesign ",ED_path,
" --proteinGroups " ,PG_path,
" --outputPath ",output_dir,
" --quantification-saint ",quantification_method,
" --quantification-comppass ",quantification_method))
# Set variables for new files generated
interaction_path = paste(output_dir,'/interaction.txt',sep = '')
prey_path = paste(output_dir,'/prey.txt',sep = '')
bait_path = paste(output_dir,'/bait.txt',sep = '')
# Filter the interaction file to remove preys with 0 intensity or spectral counts in all reps
filtered_interaction_path = filter_interaction(interaction_path)
# Run SAINT with defaults
system(paste(SAINT_path,"-L 2",filtered_interaction_path,prey_path,bait_path))
################################################################################
############# Run comppass and Perm FDR ########################################
to_comp_filename = paste(output_dir,"/to_CompPASS.csv",sep='')
comp_out = run_comppass(to_comp_filename,n_iter = resampling_iterations)
getwd()
file.exists("biogrid_summary.csv")
setwd("C:\Users/plutzer/Repos/IDG-PPI-Analysis_plutzer")
setwd("C:/Users/plutzer/Repos/IDG-PPI-Analysis_plutzer")
file.exists("biogrid_summary.csv")
system("python3")
system("python")
